This file contains documentation for all publicly accessible WALI Lua commands.


---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
WALI specific commands
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
SetCurrentUnitSize(base_pointer, command_argument, optionalHeader)

Description:
	Changes a unit's current size
Arguments:
	Number(hex) base_pointer
		Memory pointer to the current unit - cannot be in hex annotated format,
		e.g  0x001EF35A = incorrect, 001EF35A = correct
	
	Number command_argument
		Size to set unit size to. If a decimal is provided it will round down
		
	String optionalHeader
		Optional string that will be appended to the top of the .WALI file being created. 
		 Can be left empty
Returns:
	n/a
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
SetMaximumUnitSize(base_pointer, command_argument, optionalHeader)


Description:
	Changes a unit's maximum size (ie the size it will replenish to)
Arguments:
	Number(hex) base_pointer
		Memory pointer to the current unit - cannot be in hex annotated format,
		e.g  0x001EF35A = incorrect, 001EF35A = correct
	
	Number command_argument
		Size to set unit maximum to
		
	String optionalHeader
		Optional string that will be appended to the top of the .WALI file being created. 
		Can be left empty
Returns:
	n/a
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
SetUnitExperience(base_pointer, command_argument, optionalHeader)


Description:
	Changes a unit's current experience rating
Arguments:
	Number base_pointer
		Memory pointer to the current unit - cannot be in hex annotated format,
		e.g  0x001EF35A = incorrect, 001EF35A = correct
	
	Number command_argument
		Ranging from 0 - 9, the experience rating to give.  
		
	String optionalHeader
		Optional string that will be appended to the top of the .WALI file being created. 
		Can be left empty
Returns:
	n/a
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
CheckAttritionLocation(x, y, optionalHeader)


Description:
	Checks if the current location is an attrition location.  Note that this not return anything - the results of the check
	are wrote, by WALI, to a seperate return file (interface/WL) which must be manually checked.
	Attrition areas are defined in the attrition map located in Engine/Maps
	
Arguments:
	Number x
		X co-ordinate to check
	
	Number y
		Y co-ordinate to check
		
	String optionalHeader
		Optional string that will be appended to the top of the .WALI file being created. 
		Can be left empty
Returns:
	n/a
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
throwIngameWALIError(errorText)


Description:
	Displays a message to the user.  Note that this isn't comparable to any form of "throw" statement; it doesn't alter
	control flow at any stage, nor prevent execution of bad code. It's a bit optimisticly named!
	
Arguments:
	String errorText
		Message to display.  Will be prefixed by "WALI has encountered an error:"
Returns:
	n/a
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
readWALIReturnFile()


Description:
	Reads a wali return file - implemented specifically for attrition location checking
	As this function can get called before WALI.exe has disposed of the return file, it
	can encounter file permission errors.  To prevent this, it loops while trying to read the file.
	If the loop hits iteration 10000 it displays an error message - if all is working correctly it
	will normally pick up the file are 4 or 5 loops
Arguments:
	n/a
Returns:
	File contents if successful, else nil
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
Generic Lua extension
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
fileExistsForRead(fileName)


Description:
	Checks if a file exits for reading, or is accessible to read.
Arguments:
	String fileName
		File path to file
Returns:
	True if accessible, else false
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
deleteFile(fileName)


Description:
	Deletes a file at the given location.  It will loop over the file and attempt to delete until it has been deleted, up to 10000 attempts
	Note that this is case insensitive: A == a, B == b etc
Arguments:
	String fileName
		File path to file
Returns:
	n/a
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
getRandomNumber(isDecimal)


Description:
	Gets a random whole or decimal number 
Arguments:
	bool isDecimal
		If true returns random decimal, else returns random integer
Returns:
	Random number
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
convertCAAddressToHexPointer(address)


Description:
	Removes 0x prefix from hexadecimal address's 
	Note that this is not a generic function, the string indices are fixed (line 384) 
Arguments:
	String address
		Hexadecimal annotated address
Returns:
	Hex number without 0x prefix,   a string
	
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------